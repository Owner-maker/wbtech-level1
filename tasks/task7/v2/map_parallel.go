package main

import (
	"fmt"
	"sync"
)

/*
Реализовать конкурентную запись данных в map
--------------------------------------------
2 Способ: с использоанием sync.Map - по сути это просто напросто практика применения готового стандартного решения
*/

func main() {
	var nums sync.Map     // объявление переменной типа sync.Map - структуры, в к-й уже есть мьютекс, мапа и другие необходимые поля, обеспечивающие конкурентность
	var wg sync.WaitGroup // объявление переменной типа WaitGroup для обсепечения ожидания выполнения всех горутин

	// в цикле итеративно вызываем горутину (заранее увеличиваем счетчик WaitGroup) и пишем значение int в мапу

	for i := 0; i < 10; i++ {
		wg.Add(1)
		go func(nums *sync.Map, val int) {
			nums.LoadOrStore(val, val)
			wg.Done()
		}(&nums, i)
	}
	wg.Wait() // доиждаемся выполнения всех горутин
	i := 0

	// вызываем функцию Range созданной мапы, принимающей функцию для прохождения по мапе. В результате позволояет итеративно пройтись по всем парам ключ-значение мапы
	nums.Range(func(key, value interface{}) bool {
		fmt.Printf("\t[%d] key: %v, value: %v\n", i, key, value) // выводим в консоль
		i++
		return true
	})
}
