package main

import (
	"context"
	"fmt"
	"time"
)

/*
Реализовать все возможные способы остановки выполнения горутины.

----------------------------------------------------------------

Способ 3: ипользуя контекст -> контекст - часть языка Го, встроенный стандартный пакет, который предоставляет доступ для более
удобного взаимодействия горутин, которые к примеру занимаются обработкой одного запроса от пользователя
*/

func main() {
	ch := make(chan int)

	// создание контекста и дополнительного параметра cancel -> функции для остановки контекста
	ctx, cancel := context.WithCancel(context.Background())
	go func(ctx context.Context) {
		for {
			select {
			case <-ctx.Done(): // в случае получения у контекста структуры при вызове метода Done() -> завершаем горутину
				ch <- 1 // пишем в канал значение, чтобы далее горутина вышла из блокировки при его прочтении
				return
			default:
				fmt.Println("Goroutine iteration")
			}
			time.Sleep(1 * time.Second)
		}
	}(ctx)

	go func() {
		time.Sleep(3 * time.Second)
		cancel()
	}()
	<-ch
}
