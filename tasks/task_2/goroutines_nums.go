package main

import (
	"fmt"
	"sync"
)

/*
Написать программу, которая конкурентно рассчитает значение квадратов чисел
взятых из массива (2,4,6,8,10) и выведет их квадраты в stdout.
*/

func main() {
	// создаем массив типа int[5] и заполняем значениями
	values := [5]int{2, 4, 6, 8, 10}

	// объявляем переменную типа WaitGroup, которая позволит дождаться выполнения всех горутин
	var wg sync.WaitGroup

	// задаем цикл для прохождения по values
	for _, val := range values {

		// увеличиваем счетчик на 1 перед запуском очередной горутины
		wg.Add(1)
		// запуск горутины (легковесный поток), принимает в качестве параметра - int
		go func(val int) {
			// с помощью оператора defer объявляем, что необходимо после завершения горутины уменьшить счетчик на 1
			defer wg.Done()
			fmt.Println(val * val)
			// сразу после объявлеия анонимной функции вызываем горутину
		}(val)
	}
	//вызываем метод Wait(), который позволит дождаться выполнения всех горутин благодаря счетчику
	//когда счетчик = 0 -> программа завершится
	wg.Wait()
}
